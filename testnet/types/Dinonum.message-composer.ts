/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, GetCountResponse } from "./Dinonum.types";
export interface DinonumMsg {
  contractAddress: string;
  sender: string;
  increment: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  reset: ({
    count
  }: {
    count: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  add: ({
    num
  }: {
    num: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  subtract: ({
    num
  }: {
    num: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class DinonumMsgComposer implements DinonumMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.increment = this.increment.bind(this);
    this.reset = this.reset.bind(this);
    this.add = this.add.bind(this);
    this.subtract = this.subtract.bind(this);
  }
  increment = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          increment: {}
        })),
        funds: _funds
      })
    };
  };
  reset = ({
    count
  }: {
    count: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reset: {
            count
          }
        })),
        funds: _funds
      })
    };
  };
  add = ({
    num
  }: {
    num: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add: {
            num
          }
        })),
        funds: _funds
      })
    };
  };
  subtract = ({
    num
  }: {
    num: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          subtract: {
            num
          }
        })),
        funds: _funds
      })
    };
  };
}